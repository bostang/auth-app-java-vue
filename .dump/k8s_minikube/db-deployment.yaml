apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: postgres:17 # Gunakan image yang sama dengan di docker-compose
        ports:
        - containerPort: 5432
        envFrom:
        - secretRef:
            name: postgres-secrets # Ambil env dari Secret
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        # Minikube tidak dapat dengan mudah mem-mount file lokal ke initdb.d langsung seperti Docker Compose.
        # Untuk inisialisasi awal, Anda mungkin perlu melakukan ini secara manual atau menggunakan init container/configmap.
        # Untuk saat ini, kita akan asumsikan DB sudah diinisialisasi atau akan diinisialisasi oleh Spring Boot.
        # Jika Anda benar-benar membutuhkan database_setup_DOCKER.sql, kita perlu strategi lain (misal: Init Container)
        livenessProbe: # Sama seperti healthcheck di Docker Compose
          exec:
            command: ["pg_isready", "-U", "auth_user", "-d", "auth_db"]
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe: # Pastikan DB siap menerima koneksi
          exec:
            command: ["pg_isready", "-U", "auth_user", "-d", "auth_db"]
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pv-claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi # Sesuaikan ukuran sesuai kebutuhan